# Warning: This file is autogenerated from setup.py.txt. Manual changes may be discarded.

from pathlib import Path
from setuptools.command.build_ext import build_ext
import setuptools, fnmatch, glob, sys, os

HERE = Path(__file__).parent.resolve()

library_paths = []

libraries = []

compile_args = [
    '/experimental:external',
	'/external:W0',
	'/external:I',

	'/D_WIN32_WINNT=0x0A00',
	'/D_CRT_SECURE_NO_WARNINGS',
	'/DHAVE_SNPRINTF',
	
    '/DBOOST_ALL_NO_LIB',
    '/DBOOST_NO_EXCEPTIONS',
	'/DBOOST_PYTHON_STATIC_LIB',
    '/DBOOST_ERROR_CODE_HEADER_ONLY',
	'/DBOOST_TYPE_INDEX_FORCE_NO_RTTI_COMPATIBILITY',

    '/DLIBCARLA_WITH_PYTHON_SUPPORT',
	'/DLIBCARLA_IMAGE_WITH_PNG_SUPPORT=true',
	'/MD'
]

link_args = [
	'shlwapi.lib',
	'Advapi32.lib',
	'ole32.lib',
	'shell32.lib'
]

dependency_patterns = [
	f'{BUILD_PATH}/**/LibCarla-Client{LIB_EXT}',
	f'{SQLITE_LIBRARY_PATH}/**/sqlite*{LIB_EXT}',
	f'{ZLIB_LIBRARY_PATH}/**/zlib{LIB_EXT}',
	f'{BOOST_LIBRARY_PATH}/**/libboost_python*{LIB_EXT}',
	f'{BOOST_LIBRARY_PATH}/**/libboost_filesystem{LIB_EXT}',
    f'{RPCLIB_LIBRARY_PATH}/**/rpc{LIB_EXT}',
    f'{LIBPNG_LIBRARY_PATH}/**/libpng*{LIB_EXT}',
    f'{RECAST_LIBRARY_PATH}/**/Recast{LIB_EXT}',
	f'{RECAST_LIBRARY_PATH}/**/Detour{LIB_EXT}',
	f'{RECAST_LIBRARY_PATH}/**/DetourCrowd{LIB_EXT}',
    f'{XERCESC_LIBRARY_PATH}/**/xerces-c*{LIB_EXT}',
    f'{PROJ_LIBRARY_PATH}/**/proj{LIB_EXT}',
	f'{SUMO_LIBRARY_PATH}/**/osm2odr{LIB_EXT}'
]

include_paths = [
	Path('{LIBCARLA_ROOT_PATH}') / 'source',
	Path('{BOOST_INCLUDE_PATH}'),
	Path('{RPCLIB_INCLUDE_PATH}'),
	Path('{LIBPNG_INCLUDE_PATH}'),
	Path('{ZLIB_INCLUDE_PATH}'),
	Path('{RECAST_INCLUDE_PATH}'),
	Path('{XERCESC_INCLUDE_PATH}'),
	Path('{SQLITE_INCLUDE_PATH}'),
	Path('{PROJ_INCLUDE_PATH}'),
	Path('{SUMO_INCLUDE_PATH}'),
]

include_paths = [ str(e.resolve()) for e in include_paths ]

for pattern in dependency_patterns:
	candidates = glob.glob(pattern, recursive = True)
	candidates.sort()
	assert len(candidates) != 0
	if len(candidates) > 1:
		print(f'Warning: Multiple candidates match "{{pattern}}":\n{{candidates}}\n')
	link_args.append(str(Path(candidates[0]).resolve()))

depends = glob.glob('F:/Carla/PythonAPI/carla/source/libcarla/**/*', recursive = True)
depends2 = [ str(Path(e).relative_to(HERE)) for e in depends ]
depends = depends2

extensions = [ setuptools.Extension(
	'carla.libcarla',
    sources = [ 'source/libcarla/libcarla.cpp' ],
    include_dirs = include_paths,
    library_dirs = library_paths,
    libraries = libraries,
    extra_compile_args = compile_args,
    extra_link_args = link_args,
    language = 'c++14',
    depends = depends)
]

readme = ''
with open(Path('{WORKSPACE_PATH}') / 'README.md', 'r') as file:
	readme = file.read()

class BuildEXT(build_ext):
	def build_extensions(self):
		self.compiler.set_executable('compiler_so', '{CPP_COMPILER}')
		self.compiler.set_executable('compiler_cxx', '{CPP_COMPILER}')
		self.compiler.set_executable('linker_so', '{LINKER}')
		build_ext.build_extensions(self)

setuptools.setup(
	name = 'carla',
	version = '{CARLA_VERSION_STRING}',
	package_dir = {{ '' : 'source' }},
	packages = ['carla'],
	ext_modules = extensions,
	license = 'MIT License' if not ('-enable-rss' in sys.argv) else 'LGPL-v2.1-only License',
	description = 'Python API for communicating with the CARLA server.',
	long_description = readme,
	long_description_content_type = 'text/markdown',
	url = 'https://github.com/carla-simulator/carla',
	author = 'The CARLA team',
	author_email = 'carla.simulator@gmail.com',
	include_package_data = True,
	cmdclass = {{ 'build_ext' : BuildEXT }},
)