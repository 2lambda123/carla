#!/usr/bin/env python

# Copyright (c) 2023 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

from setuptools import setup, Extension
from pathlib import Path
import subprocess, glob, os

PYTHON_API_PATH = Path(__file__).parent
PYTHON_API_INTERMEDIATE_PATH = PYTHON_API_PATH / 'Intermediate'
LICENSE = 'MIT License' if not {ENABLE_RSS} else 'LGPL-v2.1-only License'

PYTHON_API_INTERMEDIATE_PATH.mkdir(exist_ok = True)
PYTHON_API_AMALGAMATED_OBJECT_PATH = PYTHON_API_INTERMEDIATE_PATH / 'libcarla{OBJ_EXT}'

compile_command = [
    '{CPP_COMPILER}',
    '/c',
    '/std:c++{CPP_STANDARD}',
    '/I', '{LIBCARLA_SOURCE_PATH}',
    '/I', '{BOOST_INCLUDE_PATH}',
    '/I', '{RPCLIB_INCLUDE_PATH}',
    '/I', '{LIBPNG_INCLUDE_PATH}',
    '/I', '{ZLIB_INCLUDE_PATH}',
    '/I', '{RECAST_INCLUDE_PATH}',
    '/I', '{XERCESC_INCLUDE_PATH}',
    '/I', '{SQLITE_INCLUDE_PATH}',
    '/I', '{PROJ_INCLUDE_PATH}',
    '/DBOOST_ALL_NO_LIB',
    '/DBOOST_PYTHON_STATIC_LIB',
    '/DBOOST_ERROR_CODE_HEADER_ONLY',
    '/D_WIN32_WINNT=0x0600',
    '/DHAVE_SNPRINTF',
    '/DLIBCARLA_WITH_PYTHON_SUPPORT',
    '/DLIBCARLA_IMAGE_WITH_PNG_SUPPORT=true',
    '/MD',
    PYTHON_API_PATH / 'source' / 'libcarla' / 'libcarla.cpp',
    f'/Fo{{PYTHON_API_AMALGAMATED_OBJECT_PATH}}',
] if os.name == 'nt' else [

]

subprocess.run(
    compile_command
).check_returncode()

sources = []

include_paths = [
]

library_paths = []

link_libraries = [
    sorted(glob.glob(str('{BOOST_INSTALL_PATH}/lib/libboost_python*{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{BOOST_INSTALL_PATH}/lib/libboost_filesystem*{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{RPCLIB_INSTALL_PATH}/lib/rpc{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{LIBCARLA_BUILD_PATH}/libcarla-client{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{LIBPNG_INSTALL_PATH}/lib/libpng*{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{ZLIB_INSTALL_PATH}/lib/zlib{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{RECAST_INSTALL_PATH}/lib/Recast{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{RECAST_INSTALL_PATH}/lib/Detour{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{RECAST_INSTALL_PATH}/lib/DetourCrowd{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{XERCESC_INSTALL_PATH}/lib/xerces-c*{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{SQLITE_BUILD_PATH}/sqlite*{LIB_EXT}'), recursive = True))[0],
    sorted(glob.glob(str('{PROJ_INSTALL_PATH}/lib/proj{LIB_EXT}'), recursive = True))[0],
]
compile_flags = []
link_flags = []
dependencies = []

carla_extensions = [
    Extension(
        name = 'libcarla.carla',
        sources = sources,
        include_dirs = include_paths,
        library_dirs = library_paths,
        libraries = link_libraries,
        extra_compile_args = compile_flags,
        extra_link_args = link_flags,
        extra_objects = [],
        language = f'c++{CPP_STANDARD}',
        depends = dependencies)
]

readme = ''
with open(PYTHON_API_PATH / 'README.md', 'r') as file:
    readme = file.read()

setup(
    name = 'carla',
    version = '{CARLA_VERSION_STRING}',
    package_dir = {{ '' : 'source' }},
    packages = [ 'carla' ],
    ext_modules = carla_extensions,
    license = LICENSE,
    description = 'Python API for communicating with the CARLA server.',
    long_description = readme,
    url = 'https://github.com/carla-simulator/carla',
    author = 'The CARLA team',
    author_email = 'carla.simulator@gmail.com',
    include_package_data = True,
)